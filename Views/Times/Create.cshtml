@model FinalProject.Areas.Identity.Data.TimeTable

@{
    ViewData["Title"] = "Create";
}

<body style="background-color:powderblue;">

    <div>
        <a asp-action="Index">Back to List</a>
    </div>
<center><h1>Time Sheet</h1></center>
<hr />
    <div class="row">
        <div class="col" style="text-align: right;">
            <p>Clock-In <span id="clockInTime"></span></p>
        </div>
        <div class="col">
            <center><h2><b><span id="timeElapsed">00:00:00</span></b></h2></center>
        </div>
        <div class="col" style="text-align: left;">
            <p>Clock-Out <span id="clockOutTime"></span></p>
        </div>
    </div>
    






<div class="container mt-4">
<div class="row">
    
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                @*<label asp-for="UserId" class="control-label"></label>*@
                <input asp-for="UserId" class="form-control" readonly type="hidden"/>
            </div>
            <div class="col-md-6">
               
                    <div class="form-group">
                
                        <button type="button" id="clockInButton" onclick="clockIn()" style="height:100px;width:100px">Clock In</button>
                         
                         <input id="clockInInput" asp-for="Clock_In" type="hidden" class="form-control" />
                        <span asp-validation-for="Clock_In" class="text-danger"></span>


                
                    </div>
                
            </div>
            <br />
            <div class="col-md-6">
                
           
                    <div class="form-group">
                    
                
                        <button type="button" id="clockOutButton" onclick="clockOut()" style="height:100px;width:100px">Clock Out</button>
                        <span id="clockOutTime"></span>
                
                        <input id="clockOutInput" asp-for="Clock_Out" type="hidden" class="form-control" />
                        <span asp-validation-for="Clock_Out" class="text-danger"></span>
                    </div>
                
            </div>
            
        </form>
    
</div>
</div>
<br />
    <div class="modal fade" id="clockInModal" tabindex="-1" aria-labelledby="clockInModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="clockInModalLabel">Clock-in Successful</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    You have successfully clocked in.
                </div>
            </div>
        </div>
    </div>

</body>
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>

        $(document).ready(function () {

            $.ajax({
                url: '/Times/GetRecentClockIn',
                type: 'GET',
                success: function (response) {
                    if (response.success) {
                        document.getElementById('clockInButton').disabled = true;
                        var clockInTime = new Date(response.clockInTime);
                        displayTimeElapsed(clockInTime);

                    } else {
                        restartTimer();
                        document.getElementById('clockInButton').disabled = true;
                    }
                },
                error: function () {
                    alert('Error!');
                }
            });
        });



        var timerInterval;



        function clockIn() {
            clearInterval(timerInterval);
            document.getElementById('clockInButton').disabled = true;
            document.getElementById('clockOutButton').disabled = false;
            localStorage.setItem('clockedIn', 'true');
            document.getElementById('clockOutTime').textContent = '';
            $.ajax({
                url: '/Times/ClockIn',
                type: 'GET',
                success: function (html) {
                    $('#clockInModal').modal('show');
                    var clockInTime = new Date(html).getTime();
                    displayTimeElapsed(clockInTime);
                },
                error: function () {
                    alert('Error!');
                }
            });
        }

        function displayTimeElapsed(clockInTime) {
            var startTime = isNaN(clockInTime) ? new Date().getTime() : clockInTime;

            var currentTime = new Date().getTime();
            var elapsedTime = currentTime - startTime;

            var hours = Math.floor(elapsedTime / (60 * 60 * 1000));
            var minutes = Math.floor((elapsedTime % (60 * 60 * 1000)) / (60 * 1000));
            var seconds = Math.floor((elapsedTime % (60 * 1000)) / 1000);

            hours = hours.toString().padStart(2, '0');
            minutes = minutes.toString().padStart(2, '0');
            seconds = seconds.toString().padStart(2, '0');

            document.getElementById('timeElapsed').textContent = hours + ':' + minutes + ':' + seconds;

            // Start the interval only if startTime is valid
            if (!isNaN(startTime)) {
                timerInterval = setInterval(function () {
                    currentTime = new Date().getTime();
                    elapsedTime = currentTime - startTime;

                    hours = Math.floor(elapsedTime / (60 * 60 * 1000));
                    minutes = Math.floor((elapsedTime % (60 * 60 * 1000)) / (60 * 1000));
                    seconds = Math.floor((elapsedTime % (60 * 1000)) / 1000);

                    hours = hours.toString().padStart(2, '0');
                    minutes = minutes.toString().padStart(2, '0');
                    seconds = seconds.toString().padStart(2, '0');

                    document.getElementById('timeElapsed').textContent = hours + ':' + minutes + ':' + seconds;
                }, 1000);
            }

            document.getElementById('startButton').disabled = true;
        }


        function clockOut() {
            clearInterval(timerInterval);
            $.ajax({
                url: '/Times/ClockOut',
                type: 'GET',
                success: function (response) {
                    document.getElementById("clockOutButton").disabled = true;
                    document.getElementById('clockInButton').disabled = false;
                },
                error: function (error) {
                    alert("Error!");
                }
            });

        }

        function resetTimer() {

            clearInterval(timerInterval);
            document.getElementById('clockInButton').disabled = false;

            // Reset the displayed time elapsed to 00:00:00
            document.getElementById('timeElapsed').textContent = '00:00:00';

        }


        document.addEventListener("DOMContentLoaded", function () {
            const clockInButton = document.getElementById("clockInButton");
            const clockOutButton = document.getElementById("clockOutButton");
            const clockInTimeDisplay = document.getElementById("clockInTime");
            const clockOutTimeDisplay = document.getElementById("clockOutTime");
            const clockInInput = document.getElementById("clockInInput");
            const clockOutInput = document.getElementById("clockOutInput");

            clockInButton.addEventListener("click", function () {
                updateClockTime(clockInTimeDisplay, clockInInput);
            });

            clockOutButton.addEventListener("click", function () {
                updateClockTime(clockOutTimeDisplay, clockOutInput);
            });

            function updateClockTime(timeDisplay, timeInput) {
                const now = new Date();
                const formattedTime = formatTime(now);
                const formattedDate = formatDate(now);

                updateDisplay(timeDisplay, formattedTime);
                updateInput(timeInput, formattedDate, formattedTime);
            }

            function formatTime(date) {
                const hours = date.getHours().toString().padStart(2, "0");
                const minutes = date.getMinutes().toString().padStart(2, "0");
                return `${hours}:${minutes}`;
            }

            function formatDate(date) {
                const year = date.getFullYear();
                const month = (date.getMonth() + 1).toString().padStart(2, "0");
                const day = date.getDate().toString().padStart(2, "0");
                return `${year}-${month}-${day}`;
            }

            function updateDisplay(displayElement, time) {
                displayElement.textContent = "Time: " + time;
            }

            function updateInput(inputElement, date, time) {
                const dateTimeString = `${date}T${time}:00`;
                inputElement.value = dateTimeString;
            }
        });

    </script>
}
